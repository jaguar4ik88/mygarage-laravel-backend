<?php

namespace App\Console\Commands;

use Illuminate\Console\Command;
use App\Models\CarMaker;
use App\Models\CarModel;
use App\Models\CarRecommendation;
use App\Models\ManualSection;
use Illuminate\Support\Facades\DB;
use OpenAI\Factory;

class GenerateCarRecommendations extends Command
{
    protected $signature = 'generate:car-recommendations 
                            {--limit=10 : Limit number of car combinations to process}
                            {--years=2000,2025 : Years range (comma-separated)}
                            {--force : Force regenerate existing recommendations}
                            {--openai-key= : OpenAI API key (or set OPENAI_API_KEY env var)}
                            {--periods : Use year periods instead of individual years}';

    protected $description = 'Generate car maintenance recommendations using OpenAI API for car maker/model combinations';

    // –ö–ª—é—á–∏ —Ç–∏–ø–æ–≤ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è (—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç key –≤ manual_sections)
    private $maintenanceTypeKeys = [
        'engine_oil',
        'oil_filter', 
        'air_filter',
        'brake_fluid',
        'coolant',
        'spark_plugs',
        'transmission_oil'
    ];

    // –ù–∞–∑–≤–∞–Ω–∏—è —Ç–∏–ø–æ–≤ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è –¥–ª—è –ø—Ä–æ–º–ø—Ç–∞
    private $maintenanceTypeNames = [
        'engine_oil' => '–ú–∞—Å–ª–æ –¥–≤–∏–≥–∞—Ç–µ–ª—è',
        'oil_filter' => '–ú–∞—Å–ª—è–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä',
        'air_filter' => '–í–æ–∑–¥—É—à–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä',
        'brake_fluid' => '–¢–æ—Ä–º–æ–∑–Ω–∞—è –∂–∏–¥–∫–æ—Å—Ç—å',
        'coolant' => '–ê–Ω—Ç–∏—Ñ—Ä–∏–∑',
        'spark_plugs' => '–°–≤–µ—á–∏ –∑–∞–∂–∏–≥–∞–Ω–∏—è',
        'transmission_oil' => '–¢—Ä–∞–Ω—Å–º–∏—Å—Å–∏–æ–Ω–Ω–æ–µ –º–∞—Å–ª–æ (–ú–ö–ü–ü)'
    ];

    public function handle()
    {
        $this->info('üöó Starting AI-powered car recommendations generation...');

        $limit = (int) $this->option('limit');
        $yearsRange = explode(',', $this->option('years'));
        $startYear = (int) $yearsRange[0];
        $endYear = (int) $yearsRange[1];
        $force = $this->option('force');
        $usePeriods = $this->option('periods');

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º API –∫–ª—é—á OpenAI
        $apiKey = $this->option('openai-key') ?: env('OPENAI_API_KEY');
        if (!$apiKey) {
            $this->error('‚ùå OpenAI API key is required. Set OPENAI_API_KEY environment variable or use --openai-key option.');
            return 1;
        }

        // –ü–æ–ª—É—á–∞–µ–º –í–°–ï –º–∞—Ä–∫–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        $makers = CarMaker::orderBy('name')->get();
        $this->info("üìä Found {$makers->count()} car makers (ALL brands)");

        // –ü–æ–ª—É—á–∞–µ–º —Å–µ–∫—Ü–∏–∏ –º–∞–Ω—É–∞–ª–æ–≤
        $manualSections = ManualSection::whereIn('key', $this->maintenanceTypeKeys)
            ->orderBy('sort_order')
            ->get()
            ->keyBy('key');
        
        if ($manualSections->isEmpty()) {
            $this->error('‚ùå No manual sections found. Run create:maintenance-sections command first.');
            return 1;
        }

        $totalGenerated = 0;
        $processed = 0;

        foreach ($makers as $maker) {
            $this->info("üîß Processing {$maker->name}...");
            
            // –ü–æ–ª—É—á–∞–µ–º –º–æ–¥–µ–ª–∏ –¥–ª—è —ç—Ç–æ–π –º–∞—Ä–∫–∏
            $models = CarModel::where('car_maker_id', $maker->id)
                ->orderBy('name')
                ->limit(5) // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–¥–µ–ª–µ–π –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                ->get();

            foreach ($models as $model) {
                if ($processed >= $limit) {
                    $this->info("‚èπÔ∏è  Reached limit of {$limit} combinations");
                    break 2;
                }

                $this->line("  üìù Processing {$model->name}...");
                
                if ($usePeriods) {
                    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –ø–µ—Ä–∏–æ–¥–∞ –ª–µ—Ç
                    $yearRange = "{$startYear}-{$endYear}";
                    $this->line("    üìÖ Generating for period: {$yearRange}");
                    
                    try {
                        $recommendations = $this->generateRecommendationsWithOpenAI(
                            $maker->name, 
                            $model->name, 
                            $yearRange, 
                            $manualSections,
                            $apiKey
                        );
                        
                        $created = $this->processRecommendations($recommendations, $maker->name, $model->name, $yearRange, $manualSections, $force);
                        $totalGenerated += $created;
                        
                    } catch (\Exception $e) {
                        $this->error("  ‚ùå Error processing {$maker->name} {$model->name} {$yearRange}: " . $e->getMessage());
                    }
                } else {
                    // –°—Ç–∞—Ä–∞—è –ª–æ–≥–∏–∫–∞ - –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≥–æ–¥–∞ –æ—Ç–¥–µ–ª—å–Ω–æ
                    for ($year = $startYear; $year <= $endYear; $year += 2) { // –ö–∞–∂–¥—ã–µ 2 –≥–æ–¥–∞
                        try {
                            // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ OpenAI –¥–ª—è –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è
                            $recommendations = $this->generateRecommendationsWithOpenAI(
                                $maker->name, 
                                $model->name, 
                                $year, 
                                $manualSections,
                                $apiKey
                            );

                            $created = $this->processRecommendations($recommendations, $maker->name, $model->name, $year, $manualSections, $force);
                            $totalGenerated += $created;

                            // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ –∫ OpenAI
                            sleep(1);

                        } catch (\Exception $e) {
                            $this->error("  ‚ùå Error processing {$maker->name} {$model->name} {$year}: " . $e->getMessage());
                            continue;
                        }
                    }
                }
                $processed++;
            }
        }

        $this->info("‚úÖ AI generation completed!");
        $this->info("üìà Generated {$totalGenerated} recommendations");
        $this->info("üîß Processed {$processed} car model combinations");
    }

    /**
     * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ OpenAI API
     */
    private function generateRecommendationsWithOpenAI($maker, $model, $year, $manualSections, $apiKey)
    {
        $maintenanceTypes = [];
        foreach ($this->maintenanceTypeKeys as $typeKey) {
            if ($manualSections->has($typeKey)) {
                $maintenanceTypes[] = $this->maintenanceTypeNames[$typeKey];
            }
        }

        $prompt = $this->buildPrompt($maker, $model, $year, $maintenanceTypes);

        try {
            $client = (new Factory())->withApiKey($apiKey)->make();
            $response = $client->chat()->create([
                'model' => 'gpt-3.5-turbo',
                'messages' => [
                    [
                        'role' => 'system',
                        'content' => '–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—å–Ω–æ–º—É –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—é. –û—Ç–≤–µ—á–∞–π —Ç–æ–ª—å–∫–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON.'
                    ],
                    [
                        'role' => 'user',
                        'content' => $prompt
                    ]
                ],
                'temperature' => 0.7,
                'max_tokens' => 1500,
            ]);

            $content = $response->choices[0]->message->content;
            $this->line("  ü§ñ OpenAI Response: " . substr($content, 0, 100) . "...");

            // –ü–∞—Ä—Å–∏–º JSON –æ—Ç–≤–µ—Ç
            $recommendations = json_decode($content, true);
            
            if (json_last_error() !== JSON_ERROR_NONE) {
                throw new \Exception('Invalid JSON response from OpenAI: ' . json_last_error_msg());
            }

            return $this->parseRecommendations($recommendations);

        } catch (\Exception $e) {
            $this->error("  ‚ùå OpenAI API error: " . $e->getMessage());
            throw $e;
        }
    }

    /**
     * –°—Ç—Ä–æ–∏—Ç –ø—Ä–æ–º–ø—Ç –¥–ª—è OpenAI
     */
    private function buildPrompt($maker, $model, $year, $maintenanceTypes)
    {
        $typesList = implode(', ', $maintenanceTypes);
        
        $yearDescription = is_string($year) && strpos($year, '-') !== false 
            ? "{$year} –≥–æ–¥–æ–≤" 
            : "{$year} –≥–æ–¥–∞";
            
        return "–ê–≤—Ç–æ–º–æ–±–∏–ª—å: {$maker} {$model}.

–ù—É–∂–Ω—ã —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—é –¥–ª—è —Å–ª–µ–¥—É—é—â–∏—Ö —Ç–∏–ø–æ–≤: {$typesList}.

–í–ê–ñ–ù–û: –†–∞–∑–¥–µ–ª–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ø–µ—Ä–∏–æ–¥–∞–º –≥–æ–¥–æ–≤, –∫–æ–≥–¥–∞ –≤ –º–æ–¥–µ–ª–∏ –±—ã–ª–∏ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è (—Ä–µ—Å—Ç–∞–π–ª–∏–Ω–≥, –Ω–æ–≤–∞—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞, –Ω–æ–≤—ã–π –¥–≤–∏–≥–∞—Ç–µ–ª—å –∏ —Ç.–¥.).

–î–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å:
1. –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–±–µ–≥–∞ (–≤ –∫–º)
2. –ö–æ–Ω–∫—Ä–µ—Ç–Ω—É—é —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é –Ω–∞ —Ç—Ä–µ—Ö —è–∑—ã–∫–∞—Ö

–û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON:
{
  \"2015-2018\": {
    \"engine_oil\": {
      \"mileage_interval\": 15000,
      \"recommendations\": {
        \"ru\": \"–ú–∞—Å–ª–æ –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –ø–æ–∫–æ–ª–µ–Ω–∏—è {$maker}\",
        \"en\": \"Oil for first generation {$maker}\",
        \"uk\": \"–ú–∞—Å–ª–æ –¥–ª—è –ø–µ—Ä—à–æ–≥–æ –ø–æ–∫–æ–ª—ñ–Ω–Ω—è {$maker}\"
      }
    }
  },
  \"2019-2023\": {
    \"engine_oil\": {
      \"mileage_interval\": 15000,
      \"recommendations\": {
        \"ru\": \"–ú–∞—Å–ª–æ –¥–ª—è –≤—Ç–æ—Ä–æ–≥–æ –ø–æ–∫–æ–ª–µ–Ω–∏—è {$maker}\",
        \"en\": \"Oil for second generation {$maker}\",
        \"uk\": \"–ú–∞—Å–ª–æ –¥–ª—è –¥—Ä—É–≥–æ–≥–æ –ø–æ–∫–æ–ª—ñ–Ω–Ω—è {$maker}\"
      }
    }
  }
  // ... –æ—Å—Ç–∞–ª—å–Ω—ã–µ –ø–µ—Ä–∏–æ–¥—ã –∏ —Ç–∏–ø—ã –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è
}

–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å:
- –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º–∏ –∏ –ø—Ä–∞–∫—Ç–∏—á–Ω—ã–º–∏
- –£—á–∏—Ç—ã–≤–∞—Ç—å –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –º–∞—Ä–∫–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—è –∏ –ø–µ—Ä–∏–æ–¥–∞
- –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–º–∏ –ø–æ —Ç–µ–∫—Å—Ç—É (—Ç–æ–ª—å–∫–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞)
- –ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—ã–º–∏ –Ω–∞ –≤—Å–µ —Ç—Ä–∏ —è–∑—ã–∫–∞";
    }

    /**
     * –ü–∞—Ä—Å–∏—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∏–∑ –æ—Ç–≤–µ—Ç–∞ OpenAI (–Ω–æ–≤–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å –ø–µ—Ä–∏–æ–¥–∞–º–∏)
     */
    private function parseRecommendations($recommendations)
    {
        $parsed = [];
        
        // –ù–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç: —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω—ã –ø–æ –ø–µ—Ä–∏–æ–¥–∞–º
        foreach ($recommendations as $period => $periodData) {
            if (is_array($periodData)) {
                foreach ($this->maintenanceTypeKeys as $typeKey) {
                    if (isset($periodData[$typeKey])) {
                        $data = $periodData[$typeKey];
                        
                        $recommendationTexts = [];
                        
                        if (isset($data['recommendations'])) {
                            // –ù–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç —Å –ø–µ—Ä–µ–≤–æ–¥–∞–º–∏
                            $recommendationTexts = $data['recommendations'];
                        } elseif (isset($data['recommendation'])) {
                            // –°—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä—É—Å—Å–∫–∏–π –∫–∞–∫ –æ—Å–Ω–æ–≤–Ω–æ–π
                            $recommendationTexts = [
                                'ru' => $data['recommendation'],
                                'en' => $this->translateToEnglish($data['recommendation'], ''),
                                'uk' => $this->translateToUkrainian($data['recommendation'], '')
                            ];
                        }
                        
                        $parsed[$period][$typeKey] = [
                            'mileage_interval' => (int) ($data['mileage_interval'] ?? 10000),
                            'recommendations' => $recommendationTexts
                        ];
                    }
                }
            }
        }

        return $parsed;
    }

    /**
     * –°–æ–∑–¥–∞–µ—Ç –ø–µ—Ä–µ–≤–æ–¥—ã —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –≤—Å–µ—Ö —è–∑—ã–∫–æ–≤
     */
    private function createRecommendationTranslations($carRecommendation, $recommendationData, $maker)
    {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–≤–æ–¥—ã –æ—Ç OpenAI –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–µ
        $translations = $recommendationData['recommendations'] ?? [
            'ru' => '–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞',
            'en' => 'Recommendation not available',
            'uk' => '–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞'
        ];

        foreach ($translations as $locale => $translation) {
            $carRecommendation->setRecommendationTranslation($locale, $translation);
        }
    }

    /**
     * –ü—Ä–æ—Å—Ç–æ–π –ø–µ—Ä–µ–≤–æ–¥ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π (–±–∞–∑–æ–≤—ã–π)
     */
    private function translateToEnglish($recommendation, $maker)
    {
        // –ü—Ä–æ—Å—Ç—ã–µ –∑–∞–º–µ–Ω—ã –¥–ª—è –±–∞–∑–æ–≤–æ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–∞
        $replacements = [
            '—Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–æ–µ –º–∞—Å–ª–æ' => 'synthetic oil',
            '–ø–æ–ª—É—Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–æ–µ –º–∞—Å–ª–æ' => 'semi-synthetic oil',
            '–º–∏–Ω–µ—Ä–∞–ª—å–Ω–æ–µ –º–∞—Å–ª–æ' => 'mineral oil',
            '–º–∞—Å–ª—è–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä' => 'oil filter',
            '–≤–æ–∑–¥—É—à–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä' => 'air filter',
            '—Ç–æ—Ä–º–æ–∑–Ω–∞—è –∂–∏–¥–∫–æ—Å—Ç—å' => 'brake fluid',
            '–∞–Ω—Ç–∏—Ñ—Ä–∏–∑' => 'coolant',
            '—Å–≤–µ—á–∏ –∑–∞–∂–∏–≥–∞–Ω–∏—è' => 'spark plugs',
            '—Ç—Ä–∞–Ω—Å–º–∏—Å—Å–∏–æ–Ω–Ω–æ–µ –º–∞—Å–ª–æ' => 'transmission oil',
            '–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π' => 'Original',
            '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å' => 'Use',
        ];

        $translated = $recommendation;
        foreach ($replacements as $ru => $en) {
            $translated = str_ireplace($ru, $en, $translated);
        }

        // –ó–∞–º–µ–Ω—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –º–∞—Ä–∫–∏ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–µ
        $translated = str_ireplace($maker, $maker, $translated);

        return $translated;
    }

    /**
     * –ü—Ä–æ—Å—Ç–æ–π –ø–µ—Ä–µ–≤–æ–¥ –Ω–∞ —É–∫—Ä–∞–∏–Ω—Å–∫–∏–π (–±–∞–∑–æ–≤—ã–π)
     */
    private function translateToUkrainian($recommendation, $maker)
    {
        // –ü—Ä–æ—Å—Ç—ã–µ –∑–∞–º–µ–Ω—ã –¥–ª—è –±–∞–∑–æ–≤–æ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–∞
        $replacements = [
            '—Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–æ–µ –º–∞—Å–ª–æ' => '—Å–∏–Ω—Ç–µ—Ç–∏—á–Ω–µ –º–∞—Å–ª–æ',
            '–ø–æ–ª—É—Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–æ–µ –º–∞—Å–ª–æ' => '–Ω–∞–ø—ñ–≤—Å–∏–Ω—Ç–µ—Ç–∏—á–Ω–µ –º–∞—Å–ª–æ',
            '–º–∏–Ω–µ—Ä–∞–ª—å–Ω–æ–µ –º–∞—Å–ª–æ' => '–º—ñ–Ω–µ—Ä–∞–ª—å–Ω–µ –º–∞—Å–ª–æ',
            '–º–∞—Å–ª—è–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä' => '–º–∞—Å–ª—è–Ω–∏–π —Ñ—ñ–ª—å—Ç—Ä',
            '–≤–æ–∑–¥—É—à–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä' => '–ø–æ–≤—ñ—Ç—Ä—è–Ω–∏–π —Ñ—ñ–ª—å—Ç—Ä',
            '—Ç–æ—Ä–º–æ–∑–Ω–∞—è –∂–∏–¥–∫–æ—Å—Ç—å' => '–≥–∞–ª—å–º—ñ–≤–Ω–∞ —Ä—ñ–¥–∏–Ω–∞',
            '–∞–Ω—Ç–∏—Ñ—Ä–∏–∑' => '–∞–Ω—Ç–∏—Ñ—Ä–∏–∑',
            '—Å–≤–µ—á–∏ –∑–∞–∂–∏–≥–∞–Ω–∏—è' => '—Å–≤—ñ—á–∫–∏ –∑–∞–ø–∞–ª—é–≤–∞–Ω–Ω—è',
            '—Ç—Ä–∞–Ω—Å–º–∏—Å—Å–∏–æ–Ω–Ω–æ–µ –º–∞—Å–ª–æ' => '—Ç—Ä–∞–Ω—Å–º—ñ—Å—ñ–π–Ω–µ –º–∞—Å–ª–æ',
            '–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π' => '–û—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∏–π',
            '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å' => '–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏',
        ];

        $translated = $recommendation;
        foreach ($replacements as $ru => $uk) {
            $translated = str_ireplace($ru, $uk, $translated);
        }

        return $translated;
    }

    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∏ —Å–æ–∑–¥–∞–µ—Ç –∑–∞–ø–∏—Å–∏ –≤ –±–∞–∑–µ
     */
    private function processRecommendations($recommendations, $maker, $model, $yearRange, $manualSections, $force)
    {
        $totalCreated = 0;
        
        // –ù–æ–≤–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞: —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω—ã –ø–æ –ø–µ—Ä–∏–æ–¥–∞–º
        foreach ($recommendations as $period => $periodData) {
            foreach ($periodData as $typeKey => $recommendationData) {
                $manualSection = $manualSections->get($typeKey);
                if (!$manualSection) {
                    continue;
                }

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è
                if (!$force) {
                    $exists = CarRecommendation::where('maker', $maker)
                        ->where('model', $model)
                        ->where('year', $period)
                        ->where('manual_section_id', $manualSection->id)
                        ->exists();
                    
                    if ($exists) {
                        continue;
                    }
                }

                // –°–æ–∑–¥–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é
                $carRecommendation = CarRecommendation::create([
                    'maker' => $maker,
                    'model' => $model,
                    'year' => $period, // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–∏–æ–¥ –æ—Ç OpenAI
                    'mileage_interval' => $recommendationData['mileage_interval'],
                    'manual_section_id' => $manualSection->id,
                ]);

                // –°–æ–∑–¥–∞–µ–º –ø–µ—Ä–µ–≤–æ–¥—ã –¥–ª—è –≤—Å–µ—Ö —è–∑—ã–∫–æ–≤
                $this->createRecommendationTranslations($carRecommendation, $recommendationData, $maker);
                $totalCreated++;
            }
        }
        
        return $totalCreated;
    }
}